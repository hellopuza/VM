#ifndef COMPILER_COMPILATIONERROR_H
#define COMPILER_COMPILATIONERROR_H

#include <cstdlib>

struct CodeLocation
{
    size_t line = 0;
    size_t begin = 0;
    size_t end = 0;
};

struct CompilationError
{
    enum class Type
    {
        OK,
        EXPECTED_OCB,
        EXPECTED_CCB,
        EXPECTED_ORB,
        EXPECTED_CRB,
        EXPECTED_CSB,
        EXPECTED_COLON,
        EXPECTED_CLASS,
        EXPECTED_CLASS_NAME,
        EXPECTED_EXPRESSION,
        EXPECTED_FIELD_NAME,
        EXPECTED_FIELD_TYPE,
        EXPECTED_METHOD_NAME,
        EXPECTED_METHOD_PARAMETER_NAME,
        EXPECTED_METHOD_RETURN_TYPE,
        EXPECTED_PRIMARY_EXPRESSION,
        FILE_NOT_FOUND,
        INCORRECT_ASSIGNMENT_LHS,
        INCORRECT_ASSIGNMENT_TYPE,
        INCORRECT_CONDITION_TYPE,
        INCORRECT_FUNCTION_PARAMETERS_NUMBER,
        INCORRECT_OPERAND,
        INCORRECT_OPERAND_TYPE,
        INCORRECT_PARAMETER_TYPE,
        INCORRECT_RETURN_CONVERSION_TYPE,
        INSTANCE_CLASS_STATIC_INVOCATION,
        INSTANCE_INSIDE_STATIC_INVOCATION,
        OVERRIDING_CLASS,
        OVERRIDING_FIELD,
        OVERRIDING_METHOD,
        OVERRIDING_VARIABLE,
        OVERRIDING_VARIABLE_FIELD,
        PRIMITIVE_TYPE_FIELD,
        PRIVATE_FIELD,
        PRIVATE_METHOD,
        REQUIRED_CLASS_INSTANCE_FIELD_ACCESS,
        REQUIRED_CLASS_INSTANCE_METHOD_ACCESS,
        RESERVED_NAME,
        UNIDENTIFIED_FIELD,
        UNIDENTIFIED_FIELD_TYPE,
        UNIDENTIFIED_FUNCTION,
        UNIDENTIFIED_METHOD,
        UNIDENTIFIED_METHOD_PARAMETER_TYPE,
        UNIDENTIFIED_METHOD_RETURN_TYPE,
        UNIDENTIFIED_TYPE,
        UNIDENTIFIED_VARIABLE,
        UNIDENTIFIED_VARIABLE_TYPE,
    };

    Type type = Type::OK;
    CodeLocation location;
};

#endif // COMPILER_COMPILATIONERROR_H